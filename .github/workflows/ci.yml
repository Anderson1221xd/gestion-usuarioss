name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# permisos mínimos para el GITHUB_TOKEN (evita "write-all" y problemas con Checkov)
permissions:
  contents: read
  checks: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Instalar Maven (solo para act)
        run: |
          if ! command -v mvn &> /dev/null
          then
            sudo apt-get update
            sudo apt-get install -y maven
          fi

      - name: Revisar estilo de código con Checkstyle
        run: mvn checkstyle:check

  super-linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Ejecutar Super-Linter
        uses: github/super-linter@v6
        env:
          # valida todo el código del repo
          VALIDATE_ALL_CODEBASE: true
          #obtener detalles
          OUTPUT_DETAILS: detailed
          DEFAULT_BRANCH: main
          # token para que super-linter pueda anotar el commit (requiere permisos)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # IGNORA archivos generados (por ejemplo target/site/jacoco/...)
          FILTER_REGEX_EXCLUDE: 'target/.*'

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Instalar dependencias y correr pruebas con coverage
        run: mvn clean verify

      - name: Guardar reporte de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Empaquetar aplicación
        run: mvn package -DskipTests

      - name: Subir artefacto empaquetado
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: target/*.jar

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: ${{ success() }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construir imagen Docker
        run: docker buildx build --load -t ${{ secrets.DOCKER_USERNAME }}/gestion-usuarios:latest .


      - name: Probar contenedor
        run: docker run --rm ${{ secrets.DOCKER_USERNAME }}/gestion-usuarios:latest
